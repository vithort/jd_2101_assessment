package com.primeit;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class StatisticsCourse extends Course {

	// Create Employee Class separately with three attributes Name, Id, Age, Salary,
	// Dept, Date OF Joining

	// Create a class variable called employees in StatisticsCourse which is a list
	// of employee class.

	List<Employee> employees = new ArrayList<Employee>();

	public StatisticsCourse() {
		super();
		// Use Constructor to populate values to employees. It should contain at least
		// 10 Employee Data.
		employees.add(new Employee("Employee 1", 1, 27, 600, "Services", new Date("2015/04/01")));
		employees.add(new Employee("Employee 2", 2, 40, 700, "IT", new Date("2017/06/01")));
		employees.add(new Employee("Employee 3", 3, 42, 620, "Services", new Date("2019/04/01")));
		employees.add(new Employee("Employee 4", 4, 35, 800, "Engineer", new Date("2019/04/01")));
		employees.add(new Employee("Employee 5", 5, 29, 600, "RH", new Date("2018/05/01")));
		employees.add(new Employee("Employee 6", 6, 32, 900, "RH", new Date("2019/09/01")));
		employees.add(new Employee("Employee 7", 7, 27, 1200, "IT", new Date("2021/01/01")));
		employees.add(new Employee("Employee 8", 8, 22, 550, "Services", new Date("2019/11/01")));
		employees.add(new Employee("Employee 9", 9, 33, 500, "Services", new Date("2018/01/01")));
		employees.add(new Employee("Employee 10", 10, 35, 620, "Services", new Date("2016/09/01")));
	}

	// Write a method to return a Map (Key: Id, Value: Name)
	public static Map<Integer, String> returnMap(List<Employee> employees) {
		Map<Integer, String> map = employees.stream().collect(Collectors.toMap(Employee::getId, Employee::getName));
		return map;
	}

	// Write a method to return a Set of employees whose age is between 30-40.
	public static Set<Employee> returnSet(List<Employee> list) {
		Predicate<Employee> byAge = employee -> employee.getAge() >= 30 && employee.getAge() <= 40;
		Set<Employee> result = (Set<Employee>) list.stream().filter(byAge).collect(Collectors.toList());

		return result;
	}

	// Write a method to Sort the employees by Name and then find the list who
	// joined after 1st April, 2018
	public static List<Employee> returnDateJoined(List<Employee> list) {
		Predicate<Employee> byDateOfJoin = employee -> employee.getDateOfJoin().after(new Date("2018/04/01"));
		Set<Employee> result = (Set<Employee>) list.stream().filter(byDateOfJoin).collect(Collectors.toList());
		Collections.sort(list);

		return list;
	}

}
